#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('back:server');
var http = require('http');


const {User, Position, db} = require('./../models');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const testPositions = [
    {
        name: 'Software Engineer'
    },
    {
        name: 'Full Stack Web Developer'
    },
    {
        name: 'Scrum Master'
    },
    {
        name: 'project Manager'
    },
    {
        name: 'Frontend Developer'
    },
    {
        name: 'Backend Developer'
    },
    {
        name: 'DevOps Engineer'
    }
];

const testUsers= [
    {
        name: 'user1',
        lastName: 'user1',
        email: 'user1@user1.com',
        phone: '123456789',
        userName: 'user1',
        passWord: 'P4ssW0rd',
        PositionId: 1
    },
    {
        name: 'user2',
        lastName: 'user2',
        email: 'user1@user2.com',
        phone: '123456789',
        userName: 'user2',
        passWord: 'P4ssW0rd',
        PositionId: 5
    },
    {
        name: 'user3',
        lastName: 'user3',
        email: 'user1@user3.com',
        phone: '123456789',
        userName: 'user3',
        passWord: 'P4ssW0rd',
        PositionId: 7
    }
]

db.sync({force: true}).then(() => {
    debug('Database synced correctly');
    server.listen(port, () => {
        Position.bulkCreate(testPositions)
            .then(() => debug('Positions table pupulated'))
            .then(() => User.bulkCreate(testUsers))
            // .then(user => user.setPosition(3))
            .then(() => debug('Users table pupulated'))
    });
    server.on('error', onError);
    server.on('listening', onListening);

})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
